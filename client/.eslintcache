[{"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/index.js":"1","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/App.js":"2","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/routes.js":"3","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/NavBar.js":"4","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/auth.hook.js":"5","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/Loader.js":"6","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/context/AuthContext.js":"7","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/pages/AuthPage.js":"8","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/pages/CreatePage.js":"9","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/http.hook.js":"10","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/message.hook.js":"11","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/Gallery.js":"12"},{"size":220,"mtime":1607526132387,"results":"13","hashOfConfig":"14"},{"size":943,"mtime":1607555235747,"results":"15","hashOfConfig":"14"},{"size":654,"mtime":1607633266654,"results":"16","hashOfConfig":"14"},{"size":752,"mtime":1608158750653,"results":"17","hashOfConfig":"14"},{"size":921,"mtime":1607636776027,"results":"18","hashOfConfig":"14"},{"size":807,"mtime":1595273407657,"results":"19","hashOfConfig":"14"},{"size":203,"mtime":1607613394022,"results":"20","hashOfConfig":"14"},{"size":3551,"mtime":1608168345091,"results":"21","hashOfConfig":"14"},{"size":4080,"mtime":1608514291957,"results":"22","hashOfConfig":"14"},{"size":998,"mtime":1595329870657,"results":"23","hashOfConfig":"14"},{"size":203,"mtime":1594974888709,"results":"24","hashOfConfig":"14"},{"size":753,"mtime":1608507579749,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ynqn6t",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/index.js",[],["54","55"],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/App.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/routes.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/NavBar.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/auth.hook.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/Loader.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/context/AuthContext.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/pages/AuthPage.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/pages/CreatePage.js",["56","57"],"import React, {useContext, useEffect, useState, useCallback} from \"react\";\n\nimport {useHttp} from \"../hooks/http.hook\";\nimport {Loader} from \"../components/Loader\";\nimport {Gallery} from \"../components/Gallery\";\nimport {useMessage} from \"../hooks/message.hook\";\n\nimport s from \"./createPage.module.css\";\nimport {AuthContext} from \"../context/AuthContext\";\n\nexport const CreatePage = () => {\n    const storageName = 'galleryAppUserGalleries';\n    const {request, loading} = useHttp();\n    const message = useMessage();\n    const auth = useContext(AuthContext);\n    const [categories, setCategories] = useState([]);\n    const formInit = {\n        categoryId: -1,\n        time: 5\n    }\n    const [form, setForm] = useState({...formInit});\n\n    const initGalleries = useCallback(() => {\n        const data = JSON.parse(localStorage.getItem(storageName));\n        console.log('initGalleries, data:', data);\n        return data ? data.galleries || [] : []\n    }, []);\n\n    const [galleries, setGalleries] = useState(initGalleries);\n\n    const getCategories = async () => {\n        const categories = await request(\n            '/api/gallery/category/all',\n            'GET');\n        return categories;\n    };\n\n\n\n    useEffect(() => {\n\n        getCategories().then(res => setCategories(res));\n    }, []);\n\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, []);\n\n    useEffect(() => {\n        if (auth.userId !== null) {\n            localStorage.setItem(storageName, JSON.stringify({\n                userId: auth.userId, galleries\n            }))\n        }\n    }, [galleries]);\n\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, []);\n\n\n    if (loading) {\n        return <Loader/>\n    }\n\n    const changeHandler = event => {\n        setForm({...form, [event.target.name]: event.target.value})\n    };\n\n    async function onBtnStartClickHandler() {\n        if (form.categoryId !== 0) {\n            try {\n                const links =\n                    await request('/api/gallery/category/name/' + categories[form.categoryId], 'GET');\n\n                await setGalleries([...galleries, {images: links, time: parseInt(form.time)}]);\n                setForm({...formInit});\n            } catch (e) {\n                message(e.message);\n            }\n        }\n    }\n\n    function onBtnRemoveClickHandler(index) {\n        setGalleries(galleries =>\n            galleries.filter((gallery, i) => i !== index));\n    }\n\n    function getGallery(gallery, index) {\n        return (\n            <div className={s.galleryWrapper}>\n                <div className={s.gallery} key={index}>\n                    <Gallery gallery={gallery}/>\n                </div>\n                <button\n                    className={\"btn\"}\n                    onClick={() => onBtnRemoveClickHandler(index)}>\n                    Remove\n                </button>\n            </div>\n        );\n    };\n\n    return (\n        <div className={'row'}>\n            <h4>Select category and interval</h4>\n            <select className=\"browser-default\"\n                    name={'categoryId'}\n                    value={form.categoryId}\n                    onChange={changeHandler}\n            >\n                <option value={-1} disabled>Choose your option...</option>\n                {categories && categories.map((category, index) =>\n                    <option value={index} key={index}>{category}</option>)}\n            </select>\n            <input className=\"input-field \"\n                   type={'number'}\n                   min={5} max={30}\n                   name={'time'}\n                   value={form.time}\n                   onChange={changeHandler}\n            />\n            <button className=\"btn waves-effect waves-light\"\n                    type=\"submit\" name=\"action\"\n                    onClick={onBtnStartClickHandler}>\n                Start\n            </button>\n            <div className={s.container}>\n                {galleries && galleries.map((gallery, index) =>\n                    getGallery(gallery, index)\n                )}\n            </div>\n        </div>\n    )\n}\n","/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/http.hook.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/hooks/message.hook.js",[],"/home/alex/WebstormProjects/tests/gallery_scheduler_ptc_local/client/src/components/Gallery.js",["58"],"import React from \"react\";\nimport AliceCarousel from 'react-alice-carousel';\nimport s from './gallery.module.css';\nimport 'react-alice-carousel/lib/alice-carousel.css';\n\nconst handleDragStart = (e) => e.preventDefault();\n\nexport const Gallery = ({gallery}) => {\n\n    const {images, time} = gallery;\n\n    if(!images) {\n        return null;\n    }\n\n    const items = images.map((image) =>\n        <img src={image} onDragStart={handleDragStart} className={s.image} alt={'no image'}/>\n    )\n\n    return (\n        <AliceCarousel\n            mouseTracking\n            autoPlayInterval={time * 1000}\n            autoHeight={true}\n            autoWidth={true}\n            autoPlay={true}\n            items={items}\n            infinite={true}\n        />\n    );\n}\n",["59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":43,"column":8,"nodeType":"67","endLine":43,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":55,"column":8,"nodeType":"67","endLine":55,"endColumn":19,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":17,"column":9,"nodeType":"73","endLine":17,"endColumn":94},{"ruleId":"61","replacedBy":"74"},{"ruleId":"63","replacedBy":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'auth.userId'. Either include it or remove the dependency array.",["79"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["76"],["77"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},"Update the dependencies array to be: [getCategories]",{"range":"84","text":"85"},"Update the dependencies array to be: [auth.userId, galleries]",{"range":"86","text":"87"},[1294,1296],"[getCategories]",[1572,1583],"[auth.userId, galleries]"]